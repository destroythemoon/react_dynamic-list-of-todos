{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","titleInput","sortBy","handleInputChange","event","setState","target","value","toLowerCase","handleSelectedChange","getSortedBySelected","todos","filter","todo","completed","getSearchTodos","title","includes","this","props","chooseUser","selectedUserId","markTodo","todosByStatus","todosByInput","className","type","name","id","placeholder","onChange","map","classNames","checked","userId","onClick","React","Component","API_URL","getTodos","a","fetch","then","result","json","getUser","CurrentUser","user","userError","loadUser","prevProps","email","phone","unselectAll","App","checkTodo","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95dea5d2.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ninterface State {\n  titleInput: string,\n  sortBy: string,\n}\n\ninterface Props {\n  todos: Todo[],\n  selectedUserId: number,\n  chooseUser: (userId: number) => void,\n  markTodo: (todoId: number) => void,\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    titleInput: '',\n    sortBy: 'all',\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      titleInput: event.target.value.toLowerCase(),\n    });\n  };\n\n  handleSelectedChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      sortBy: event.target.value,\n    });\n  };\n\n  getSortedBySelected = (todos: Todo[]) => {\n    switch (this.state.sortBy) {\n      case 'completed':\n        return todos.filter(todo => todo.completed);\n\n      case 'notCompleted':\n        return todos.filter(todo => !todo.completed);\n\n      default:\n        return todos;\n    }\n  };\n\n  getSearchTodos = (todos: Todo[]) => {\n    if (this.state.titleInput) {\n      return todos.filter(todo => todo.title.toLowerCase().includes(this.state.titleInput));\n    }\n\n    return todos;\n  };\n\n  render() {\n    const {\n      todos,\n      chooseUser,\n      selectedUserId,\n      markTodo,\n    } = this.props;\n    const todosByStatus = this.getSortedBySelected(todos);\n    const todosByInput = this.getSearchTodos(todosByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos</h2>\n\n        <input\n          type=\"text\"\n          name=\"sortByText\"\n          id=\"sortByText\"\n          placeholder=\"Search todo\"\n          value={this.state.titleInput}\n          onChange={this.handleInputChange}\n        />\n\n        <select\n          className=\"select\"\n          name=\"sortBySelect\"\n          id=\"sortBySelect\"\n          value={this.state.sortBy}\n          onChange={this.handleSelectedChange}\n        >\n          <option value=\"all\">\n            Show all\n          </option>\n          <option value=\"completed\">\n            Show complited\n          </option>\n          <option value=\"notCompleted\">\n            Show not complited\n          </option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todosByInput.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item',\n                  { 'TodoList__item--unchecked': !todo.completed },\n                  { 'TodoList__item--checked': todo.completed })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => markTodo(todo.id)}\n                  />\n                  <p>\n                    {todo.title}\n                  </p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button', 'button',\n                    { 'TodoList__user-button--selected ': todo.userId === selectedUserId })}\n                  type=\"button\"\n                  onClick={() => chooseUser(todo.userId)}\n                >\n                  User\n                  {' '}\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  return fetch(`${API_URL}/todos`)\n    .then(result => result.json());\n};\n\nexport const getUser = (userId: number) => {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(result => result.json());\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\ninterface State {\n  user: User | null,\n  userError: boolean,\n}\n\ninterface Props {\n  selectedUserId: number,\n  unselectAll: () => void,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state = {\n    user: {} as User,\n    userError: false,\n  };\n\n  async componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.selectedUserId !== prevProps.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = async () => {\n    try {\n      const user = await getUser(this.props.selectedUserId);\n\n      this.setState({\n        user,\n        userError: false,\n      });\n    } catch {\n      this.setState({\n        userError: true,\n      });\n    }\n  };\n\n  render() {\n    return (\n      this.state.userError === false ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {' '}\n              {this.state.user.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {this.state.user.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {this.state.user.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {this.state.user.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              this.props.unselectAll();\n            }}\n          >\n            Clear user\n          </button>\n        </div>\n      )\n        : (\n          `User id #${this.props.selectedUserId} not found`\n        )\n    );\n  }\n}\n","import React from 'react';\nimport './styles/App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ninterface State {\n  selectedUserId: number,\n  todos: Todo[],\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  chooseUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  unselectAll = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  checkTodo = (todoId: number) => {\n    this.setState(({ todos }) => ({\n      todos: todos.map(todo => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.state.todos}\n            chooseUser={this.chooseUser}\n            selectedUserId={selectedUserId}\n            markTodo={this.checkTodo}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={this.state.selectedUserId}\n                unselectAll={this.unselectAll}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}